user www-data;
worker_processes  auto;

#error_log  /var/log/nginx/error.log notice;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# Уменьшает число системных вызовов gettimeofday(), что приводит к увеличению производительности
timer_resolution 100ms;

events {
    # Устанавливает максимальное количество соединений одного рабочего процесса. Следует выбирать значения от 1024 до 4096.
    worker_connections  1024;

    # epoll for Linux, kqueue for FreeBSD
    #use epoll;

    # Будет принимать максимально возможное количество соединений
    multi_accept    on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Основной лог лучше отключить для экономии дисковых операций, а лог ошибок лучше перевести в режим логирования только критических ситуаций.
    #access_log     off;
    #error_log /var/log/nginx/error.log crit;

    # Fully disable log errors.
    #error_log /dev/null crit;

    # Buffer log writes to speed up IO.
    #access_log /var/log/nginx/access.log main buffer=16k;

    # Метод отправки данных sendfile более эффективен, чем стандартный метод read+write
    sendfile        on;

    # Causes nginx to attempt to send its HTTP response head in one packet,  instead of using partial frames.
    tcp_nopush      on;

    # Don't buffer data-sends (disable Nagle algorithm).
    tcp_nodelay     on;

    proxy_buffering             on;
    proxy_buffer_size           256k;
    proxy_buffers               4 256k;
#    proxy_busy_buffers_size     256k;
    proxy_temp_file_write_size  256k;

    client_body_buffer_size 1m;

    # Будет ждать 20 секунд перед закрытием keepalive соединения
    keepalive_timeout           20;

    # Максимальное количество keepalive запросов от одного клиента
    keepalive_requests          100;

    # Allow the server to close the connection after a client stops responding.
    reset_timedout_connection   on;

    # Send the client a "request timed out" if the body is not loaded by this time.
    client_body_timeout         10;

    # If the client stops reading data, free up the stale client connection after this much time.
    send_timeout                2;

    # минимальный размер файла для прямого чтения с диска, в обход файлового кэша
    directio                    8m;

    # порог отдачи, после которого начинает действовать ограничение скорости
    limit_rate_after            1m;

    # ограничение на скорость скачивания в рамках одного запроса - экономим полосу пропускания
    limit_rate                  196K;

    # if client sends stuff larger than this, it gets 413 error
    client_max_body_size        8m;

    # Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
    open_file_cache max=200000 inactive=20s;

    # Определяет через какое время информация будет удалена из кеша
    open_file_cache_valid 30s;

    # Будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
    open_file_cache_min_uses 2;

    # Будет кешировать информацию об отсутствующих файлах
    open_file_cache_errors on;

    #  while processing a request mapped to the /path/to/file file, NGINX will try to find and send the /path/to/file.gz file. If this file is absent, or the client does not support gzip, the regular file will be sent.
    gzip_static         on;
    gzip                on;
    gzip_min_length     1k;
    gzip_http_version   1.1;
    gzip_comp_level     6;
    gzip_buffers        4 8k;
    gzip_types          text/plain application/xhtml+xml text/css application/xml application/xml+rss text/javascript application/javascript application/x-javascript;
    gzip_proxied        any;
#    gzip_proxied       expired no-cache no-store private auth;
    gzip_disable        "MSIE [1-6]\.";
    gzip_vary           on;

    server_names_hash_max_size 262144;
    server_names_hash_bucket_size 128;
    server_tokens                 off; # do not show version of nginx

    # запрет на отображение нашего контента в iframe
    #add_header X-Frame-Options DENY;

    # Это скажет IE, что нет необходимости автоматически определять Content-Type, а необходимо использовать уже отданный content-type. Уже были security-баги у IE, связанные именно с автоматическим определением типа содержимого.
    add_header X-Content-Type-Options nosniff;

    # Заголовок для IE. Активирует встроенную XSS-защиту.
    add_header X-XSS-Protection "1; mode=block;";

    # Определяет, с каких доменов можно подгружать JS (X-Content-Security-Policy для IE10 и X-WebKit-CSP для FF/Chrome).
    #add_header X-Content-Security-Policy "allow 'self';";
    #add_header X-WebKit-CSP "allow 'self';";

    real_ip_header X-Real-IP;

    # show customs page for HTTP 50x code's, see file 'error'
    error_page 500 501 502 503 504 /50x.html;

    # http://nginx.com/resources/admin-guide/caching/

    #proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:32m loader_threshold=300 loader_files=200 max_size=200m;

    # server {
    #     listen 8080;
    #     proxy_cache one;

    #     location / {
    #         proxy_pass http://backend1;
    #     }

    #     location /some/path {
    #         proxy_cache_valid any   1m;
    #         proxy_cache_min_uses 3;
    #         proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
    #         proxy_pass http://backend2;
    #     }
    # }

    # внутренняя статистика nginx
#    server {
#        listen *:8899;
#        server_name stub.local;

#        location / {
#            stub_status on;
#            access_log off;
#        }
#    }

    # Запрещаем запросы без поля “Host” в заголовке, закрываем соединение
    # http://nginx.org/ru/docs/http/request_processing.html
    server {
        listen      80;
        server_name "";
        return      444;
    }

    include vhosts.d/*.conf;
}
